112 
// go to github of this guy and download lesson 112[x]
// npm i [x]
// npm start[x]

113
// git commit[]
// crateg page folder inside src   wrap[]
// home  login signup  folder[x]
// inside home folder, Home.jsx[x]
// sibiing to Home.jsx,  Home.module.css[x]
// gt home jsx, import styles from home module css[x]
// rafce[x]
// do same thing to all page folders[x]
// npm i react-router-dom@5.1[x]
// import router -  google[x]
// inside a div with cn app  [x]
// Router wrap switch [x]
// create Route for each component[x]
// import all the component[x]
// home as / [x]
// each route need path and compoent [x]
// google [x]
// [x]

114 
// create new folder, components, in [x]src
// Navbar.jsx   css[x]
// import style[x]
// gt css  copy & paste from???[x]
// gt jsx [x]
// jsx nav. [x]
// cn = {style.navbar} wrap[x]
// ul wrap li.title cont myMoney[x]
// sib, li wrap Link to '/login cont [x]login
// Signup same[x]
// gt app.jsx[x]
// import Navbar[x]
// above switch, insert[x]

115 
// []
// gt login jsx [x]
// gt css copy paste[x]
// gt login jsx[x]
// create login form  [    ][]
  // jsx form cn={styles['login-form']}[x]
  //  h2 login[]
  // sib, label wrap[x]
  // span  email:[x]
  // sib, input type email[x]
  // repeat label group with password[x]
  // add button cn btn cont Login [x]
// chall.  make it so it will update []the state from input [    ] 
  //  import useState [x]
  // state email ""   state password[x]
  // onchange  that setEmail e.target.[x]value  to setEmail

116 [x]
// make signup form 
// fill the form take email 
// user name 
// state, label input  onchange
// 

117
// create project [x]
// click on app to start  [x]
// install fire basee and make the config file [x]
// npm 8.5  [x]
// create config.js file [x]
// copy and paster firebaseConfig object [x]
// import firebase from 'firebase/app' [x]
// import 'firebase/firestore'
// import 'firebase/auth'
// intialize  use initializeApp  method from firebase,  passing firebaseConfig object [x]
// invoke fireStore method from firebase, assign to projectFirestore []
// invoike auth method , assign to projectAuth  [x]

// export destructured from config.js [x]

119
// create hooks folder inside src [x]
// create useSignup.js [x]
// create a plain functino with export [x]
// useState and import auth fro config [x]
// state error isPending [x]
//  insert async  function  signup  [x]
//  pass email password displayName [x]
// out side of async, return {error, isPending, signup} [x]
// insert inside of async, setError(null) [x]
// setIsPending(true) [x]
// try {} [x]
// catch (err) { []
//  console.log(err.message) setError(err.message) setIsPending(false) [x]
// }  [x]
// insert in try{*} [x]
// await auth.createUserWIthEmailAndPassword() [x]
// pass email,password [x]
// console.log(res.user) [x]
// if (!res) { * } [x]
// insert, throw new Error('Could not complete signup' ) [x]
// out sideof if (!res)... , await res.user.updateProfile() [x]
// pass {displayName } [x]
// sibl.. setIsPending(false) [x]
// setError(null) [x]

120
// gt Signup.js  [x] 
// import useSignup from hooks  [x] 
// below states, destrucre the return of hook  when invoke the hooks ; )  [x] 
// in handleSubmit,  signup function passing email password userName  [x] 
// below the button, error && p tag with {error}  [x] 
// create diabled button loading when isPending is true  [x] 
// do opposit for signup button  [x] 
// test  [x] 

121 
// cretate context folder  [x] 
// create AuthContext.js [x] 
// import createContext and useReducer from react [x] 
// export const AuthContext assigned  CreateContext()  [x] 
// export const AuthContextProvider = () => {*} [x] 
// return (*) [x] 
// <AuthContext.Provider> wrap [x] 
// {children} [x] 
// above return, const [state, dispatch] assign useReducer(*) [x] 
// authReducer,{ user:null} [x] 
// add attribute to AuthContext.Provier, value = {{...state, dispatch }} [] 

//between two const, add another export const authReducer=(state, action) => {*} [x] 
// switch(action.type){*} [x] 

// insert,  default:  [x] 
// return state [x] 
// gt index.js [] 
// import {AuthContextProvider} [x] 
// wrap <App/> [x] 
// create useAuthContext.js inside hook folder[] 
// import {AuthContext} [x] 
// import , useContext  [x] 
// export const useAuthContext = () => { *} [x] 
// insert const context = useContext(AuthContext) [x] 
// insert return context [x] 
// above return, if context is falsy, throw Error('useAuthContext must be insie an AuthContextProvider') [x] 
// 

122
// gt AuthContex.js [x]

// insert in switch, case 'LOGIN':  return{...state, user: action.payload} [x]
-- set up the switch case 

// gt useSignup [x]
// import useAuthContext [x]
// below the states, const {dispatch} = useAuthContext() [x]
// inside of try, after await ..updateprofile, dispatch({type: "LOGIN", payload: res.user }) [x]
-- use the dispat function but first you gotta bring in by import and inistialze 
-- using dispatch upload user
-- dispatch takes object type and playload
-- dispatch is action

// gt AuthContext.js  [x]
// inside of AuthContextProvider, below const [state]..., console.log("AuthContext state: ", state) [x]

123 commit [x]
// create useLogout.js in hook folder  [x]
// function  create  [x]
// import useState  [x]
// import Auth,  useAuthContext   [x]
// make state error null isPending false   [x]
// bring dispatch with useAuthContext  [x]
// const logout = async ()=> {*}  [x]
// insert, setError(null) setIsPending(true)  [x]
// try{} catch(err){}  [x]
// inside catch block insert, console.log(err.message) setError(err.message) setIsPending(false)  [x]
// inside try block, await Auth.signOut()  [x]
// dispatch({type: 'LOGOUT'})  [x]
// setIsPending(false) setError(null)  [x]
// outside of try /catch, return {logout, error, isPending}  [x]
// gt AuthContext, add case same but user: null  [x]
//   [x]

-- call the http with asyn await
--  no reponse need, just error handle 
-- export the states and functions as object

124 commit [x]
// gt Navbar.js [x]
// in Navbar block,  bring logout from useLogout() [x]
// jsx add new li tag after signup, button cn btn onclick logout cont logout  [x]
// gt useLogout, export the logout function [x]
// test in browser [x]
--adding a button on nav bar
--when it click clicks logout


125 commit [x]

// gt useLogout  [x]
// add state isCanceled false [x]
// add useEffect above return  [x]
// inside of the block, return ()=> setIsCanceled(true) [x]
// inside of try block, above setIsPedning(false), add if(!isCanceled){ *} [x]
// move, insert the setStates  [x]
// do same in catch block [x]

// copy to useSignup.js [x]
// import useEffect [x]

126 commit [x]

// create useLogin.js inside of hooks folder  [x]
// copy paste  [x]
// change names  [x]
// fetch passing email password  [x]
// change and set up dispatch  [x]
// update user on dispatch  [x]

127 commit [x]

// gt Login.js [x] 
// import useLogin [x] 
// login error isPending = useLogin() [x] 
// handleSubmit add login(email, password) [x] 
// bottom of jsx from {*} [x] 
// error && <p> {error} [x] 
// if pending is true show loading button with disable [x] 
// else login button show [x] 

128 commit [x] 

// gt Navbar.js [x] 
// import useAuthContext [x] 
// const {user} = useAuthContext()  [x] 
// !user && show the login and sign up menu [x] 
// user && show logout and <li> Hello, {user.displayName} [x] 

129 commit [x]
// gt AuthContex [x]
// add to initial state, authIsReady: false  [x]
// add useEffect under [x]
// insert in the block, auth.onAuthStateChanged(*) [x]
// (user) => {dispatch({type: 'AUTH_IS_READY', payload:user })} [x]
// assign auth.on... to const unsub  [x]
// insert in the block unsub() [x]
// add case in switch, case 'AUTH_IS_READY' [x]
// return {...state, user: action.payload, authIsReady: true} [x]

130 commit [x]

//gt app.js [x]
// import useAuthContext [x]
// destructure authIsReady from useAuthContext [x]()
// wrap  authIsRead && everything [x]
// test [x]

131 commit [x] end of authentication

// gt app.js [x]
// import redirect [x]
// wrap Home with user&& [x]
// right above {!user && <Redirect to '/login' />} [x]
// do similar thing to login [x]
// do signup [x] 
// 

132 commit [x][]

// gt homepage [x]
// cn styles.container wrap [x]
// div.styles.content  [x]transaction list
// sibliing div style.sidebar [x]
// gt css copy paste  [x]
// create TransactionForm.jsx in Home folder [x]
// _rfc [x]
// import useState [x]
// const [name, setName] = "" [x]
// state amount "" [x]
// create form that looks like on the video [x]
// I need to put form in side bar [x]
// create form [x]
// create couple state  [x]
// button that submits but for now console an object  [x]
// all the input need to update on form [x]

133 commit [x]

// gt firestore online and create database [x]
// create useFireStore.js inside hooks folder [x]
// import useReducer useEffect useState [x]
// projectFirestore from config [x]
// export const useFirestore function [x]
// pass collection [x]
// in the block,  const [response, dispatch] =useReducer(firestoreReducer, initialState) [x]
// let initialState = {*} [x]
// insert, document: null, isPending: false, error: null, success: null [x]
// const firestoreReducer =(state, action) => {*} [x]
// insert, switch (action.type){*} [x]
// insert, default:  return state [x]
// below reponse state, isCancelled false [x]
// const ref = projectFirestore.collection(collection)  [x]
// const addDocument = (doc) => {empty} [x]
// const deleteDocument = (doc) => { }[x]
// useEffect(() => {*}, []) [x]
// insert, return () => { setIsCanceled(true)} [x]
// retrun {addDocument, deleteDocument} [x]

134 commit []

// inside of addDoc.., dispatch({*}) [x]
// type: "IS_PENDING" [x]
// add, case 'IS_PENDING':  [x]
// return {...state, isPending: true} [x]
// inside of addDoc.., try{*} catch [x]
// insert, await ref.add(doc) [x]
// assign to const addedDocument [x]
// below ref insert, [x]
// const dispatchIfNotCancelled = () =>{*} [x]
// if(!isCancelled){*} [x]
// dispatch(action) [x]
// inside try block, dispatchIfNotCancelled({type: 'ADDED_DOCUMENT', payload: addedDocument }) [x]
// add, case 'ADDED_DOCUMENT': [x]
// return { isPending: false, document:action.payload, success: true, error: null} [x]
// inside of catch block, dispatchIfNotCancelled({type: 'ERROR', payload: err.message }) [x]
// add case 'ERROR': [x]
// return { isPending: false, document: null, success: false, error: action.payload} [x]
// update case "IS_PENDING":, return { isPending: true, document: null, success: false, error: null } [x]

135 timestamp commit [x]

// gt config [x]
// const timestamp = firebase.firestore.Timestamp  [x]
// export timestamp [x]
// gt useFirestore  [x]
// import  [x]
// try block,  const cratedAt = timestamp.fromDate(new Date()) [x]
// inside of await, replace doc with {...doc, createdAt }[x]

136 commit [x]

// gt TransactionForm  []
// import useFireStore []
// const {addDocument , response} = useFireStore('transaction') []
// addDocument({name, amount}) []

--in the form, we going to make onSubmit to submit the data by giving the collection name "transaction"[x]

-- we are going to add uid that is brought out through home from user  useAuthContext [x]
-- because home will process user for other stuff[x]
-- so goto home and bring the user and pass on to form [x]


// gt home.js [x]
// const {user} = useAuthContext() [x]
// import useAut... [x]
// insert props in, <TransactionForm uid = {user.uid} [x]
// gt TransactionForm [x]
// inside of Transaction form function, pass {uid} [x]
// inside addDocument(), add uid: uid [x]
// test and look firestore  [x]

// gt TransactionForm [x]
// undert handleSubmit , add useEffect  [x]
// add dependancy of response.success []
// if(resonse.success){*} [x]
// setName('') setAmount('') [x]
// test[x]

137 commit [x]
-- goal - getting all the data of the user....  []
-- you need error and documents [x]
-- get the ref from store state the collection   [x]
-- https://firebase.google.com/docs/firestore/query-data/listen#web-version-8_1 []
-- use sanpshot to get the updated data [x]


-- get docs from snapshot and separate them extract the data  and id,push them as object, add to array [x]
-- save to state  [x]
-- return the state  [x]
-- 2nd param is onSnapshot is error  insert error function. [x]
-- unsubscribe by clean up at useEffect [x]


// create useCollection.js in hooks [x]
// export function passing collection [x]
// import  useEffect useState [x]
// import fireStore [x]
// state document null error null  [x]
// useEffect dependancy collection [x]
// in the useeffect block, let ref= firestore.collection(collection) [x]
// const unsubscribe = ref.onSnapshot((snapshot) => {*}) [x]
// insert, let results = [x] snapshot.docs.forEach(doc => {*}) [x]
// insert result.push({ ...doc.data(), id: doc.id }) [x]
// inside of unsubscribe, setDocuments (results) []
// setError (null) []
// create second function arguement  passing error  => {*} [x]
// console.log(error) [x]
// setError('could not fetch the data') [x]
// return () => unsubscribe() [x]
// return {document, error} [x]

138 commit [x]

-- goal - to show the all the transaction at home page [x]
-- bring the document and error [x]
-- if the error show error message [x]
-- if there is something in document, show transection [x]
-- create separte compoent and pass props [x]
-- map them.  with li and p  [x]


// gt home.js [x]
// import useCollection [x]
// extact documents , error  [x]
// inside of cn content insert , {error && p {error}}  [x]
// {documents && <TransactionList transactions = {documents} />} [x]
// create and gt TransactionList in home folder [x]
// copy paste transaction styles in home.module.css [x]
// gt TransactionList  pass prop transactions [x]
// ul  cn transactions wrap [x]
// insert {transactions.map(transaction => { [x]
  return (*)
})}

// li key id wrap [x]
// p cn name cont {name} [x]
// p cn amount {amount} [x]

139 firestore quaries commit [x]
-- goal - match user and show only that data by using where query 
-- will add if condtion to see if  parameter is passed in as array and spread and code. 
-- you can't add array as useEffect dependancy, so gotta alter it with useRef

// gt doc  look for where  [x]
// gt useCollection [x]
// pass query [x]
// below ref, insert, if(query){ ref =ref.where(...query)} [x]
// gt home.js [x]
// pass in useCollection, ['uid', '==', user.uid] [x]
// gt useCollection, add query in dependancy [x]
// above useEffect, const query = useRef(_query).current [x]
// import useRef [x]
// 

140 ording firestore queries summit  [x]

// add orderby 

141 delete commit [x] 
-- goal  - to delete each
  -- create deleteDocument function 
  -- create button 
  -- let it connect with credintials

// gt useFireStore [x]
// inside deleteDocument, dispatch({type:"IS_PEDNGIN"}) [x]
// try catch block [x]
// in try block, const deleteDocument = await ref.doc(id).delete() [x]
// dispatchIfNotCancelled({type: "DELETED_DOCUMENT", payload: deleteDocument}) [x]
// add case [x]
//return {isPending: false, document: action.payload, success: true, error:null} [x]
// in error block, dispatchIfNotCancelled({type: 'ERROR', payload: 'could not delete'}) [x]
// gt TransactionList [x]
// import hook [x]
// bring in deleteDocument and response [x]
// console.log(reponse) [x]
// button x  onclick () => {deleteDocument(id)} [x]
// 

142 commit []

// gto firestore online[x]
// rules tab [x]
// 

143 commit []
//  npm i -g firebase-tools [x]
// firebase login  [x]
// gt project file ,firebase init [x]
// firestore and hosting check [x]
// use existing project [x]
// just enter for  default rule [x]
// PULIC NO, build instead [x]
// y for SPA  [x]
// auto github? no.   default [x]
// done [x]

// install firebase ext. []

144 rule for read and write
// watched [x]
// gt firestore.rules []
// allow create: if request.auth != null []
// allow read, delete: if request.auth == resource.data.uid; []

145 deploy firebase rules
// watched [x] 
// firebase deploy --only firestore  >> enter
// still need query where uid == user.uid

146 building react app
// watched[x]
// npm run build

147 deploy to firebase

// firebase deploy
// done
// firebase dashboard gt
// gt hosting 
// click on domain
// test 


148 update and redeploy

// change 
// npm run build
// firebase deploy
// check on hosting on firebase dashboard
// hard refresh

149 rolling back deployment

// Rollback  on setting  on dashboard

-- goal --
-- finish lesson
-- push github
-- deploy firebase
-- upload to porfolio 




















