112 
// go to github of this guy and download lesson 112[x]
// npm i [x]
// npm start[x]

113
// git commit[]
// crateg page folder inside src   wrap[]
// home  login signup  folder[x]
// inside home folder, Home.jsx[x]
// sibiing to Home.jsx,  Home.module.css[x]
// gt home jsx, import styles from home module css[x]
// rafce[x]
// do same thing to all page folders[x]
// npm i react-router-dom@5.1[x]
// import router -  google[x]
// inside a div with cn app  [x]
// Router wrap switch [x]
// create Route for each component[x]
// import all the component[x]
// home as / [x]
// each route need path and compoent [x]
// google [x]
// [x]

114 
// create new folder, components, in [x]src
// Navbar.jsx   css[x]
// import style[x]
// gt css  copy & paste from???[x]
// gt jsx [x]
// jsx nav. [x]
// cn = {style.navbar} wrap[x]
// ul wrap li.title cont myMoney[x]
// sib, li wrap Link to '/login cont [x]login
// Signup same[x]
// gt app.jsx[x]
// import Navbar[x]
// above switch, insert[x]

115 
// []
// gt login jsx [x]
// gt css copy paste[x]
// gt login jsx[x]
// create login form  [    ][]
  // jsx form cn={styles['login-form']}[x]
  //  h2 login[]
  // sib, label wrap[x]
  // span  email:[x]
  // sib, input type email[x]
  // repeat label group with password[x]
  // add button cn btn cont Login [x]
// chall.  make it so it will update []the state from input [    ] 
  //  import useState [x]
  // state email ""   state password[x]
  // onchange  that setEmail e.target.[x]value  to setEmail

116 [x]
// make signup form 
// fill the form take email 
// user name 
// state, label input  onchange
// 

117
// create project [x]
// click on app to start  [x]
// install fire basee and make the config file [x]
// npm 8.5  [x]
// create config.js file [x]
// copy and paster firebaseConfig object [x]
// import firebase from 'firebase/app' [x]
// import 'firebase/firestore'
// import 'firebase/auth'
// intialize  use initializeApp  method from firebase,  passing firebaseConfig object [x]
// invoke fireStore method from firebase, assign to projectFirestore []
// invoike auth method , assign to projectAuth  [x]

// export destructured from config.js [x]

119
// create hooks folder inside src [x]
// create useSignup.js [x]
// create a plain functino with export [x]
// useState and import auth fro config [x]
// state error isPending [x]
//  insert async  function  signup  [x]
//  pass email password displayName [x]
// out side of async, return {error, isPending, signup} [x]
// insert inside of async, setError(null) [x]
// setIsPending(true) [x]
// try {} [x]
// catch (err) { []
//  console.log(err.message) setError(err.message) setIsPending(false) [x]
// }  [x]
// insert in try{*} [x]
// await auth.createUserWIthEmailAndPassword() [x]
// pass email,password [x]
// console.log(res.user) [x]
// if (!res) { * } [x]
// insert, throw new Error('Could not complete signup' ) [x]
// out sideof if (!res)... , await res.user.updateProfile() [x]
// pass {displayName } [x]
// sibl.. setIsPending(false) [x]
// setError(null) [x]

120
// gt Signup.js  [x] 
// import useSignup from hooks  [x] 
// below states, destrucre the return of hook  when invoke the hooks ; )  [x] 
// in handleSubmit,  signup function passing email password userName  [x] 
// below the button, error && p tag with {error}  [x] 
// create diabled button loading when isPending is true  [x] 
// do opposit for signup button  [x] 
// test  [x] 

121 
// cretate context folder  [x] 
// create AuthContext.js [x] 
// import createContext and useReducer from react [x] 
// export const AuthContext assigned  CreateContext()  [x] 
// export const AuthContextProvider = () => {*} [x] 
// return (*) [x] 
// <AuthContext.Provider> wrap [x] 
// {children} [x] 
// above return, const [state, dispatch] assign useReducer(*) [x] 
// authReducer,{ user:null} [x] 
// add attribute to AuthContext.Provier, value = {{...state, dispatch }} [] 

//between two const, add another export const authReducer=(state, action) => {*} [x] 
// switch(action.type){*} [x] 

// insert,  default:  [x] 
// return state [x] 
// gt index.js [] 
// import {AuthContextProvider} [x] 
// wrap <App/> [x] 
// create useAuthContext.js inside hook folder[] 
// import {AuthContext} [x] 
// import , useContext  [x] 
// export const useAuthContext = () => { *} [x] 
// insert const context = useContext(AuthContext) [x] 
// insert return context [x] 
// above return, if context is falsy, throw Error('useAuthContext must be insie an AuthContextProvider') [x] 
// 

122
// gt AuthContex.js [x]

// insert in switch, case 'LOGIN':  return{...state, user: action.payload} [x]
-- set up the switch case 

// gt useSignup [x]
// import useAuthContext [x]
// below the states, const {dispatch} = useAuthContext() [x]
// inside of try, after await ..updateprofile, dispatch({type: "LOGIN", payload: res.user }) [x]
-- use the dispat function but first you gotta bring in by import and inistialze 
-- using dispatch upload user
-- dispatch takes object type and playload
-- dispatch is action

// gt AuthContext.js  [x]
// inside of AuthContextProvider, below const [state]..., console.log("AuthContext state: ", state) [x]

123 commit [x]
// create useLogout.js in hook folder  [x]
// function  create  [x]
// import useState  [x]
// import Auth,  useAuthContext   [x]
// make state error null isPending false   [x]
// bring dispatch with useAuthContext  [x]
// const logout = async ()=> {*}  [x]
// insert, setError(null) setIsPending(true)  [x]
// try{} catch(err){}  [x]
// inside catch block insert, console.log(err.message) setError(err.message) setIsPending(false)  [x]
// inside try block, await Auth.signOut()  [x]
// dispatch({type: 'LOGOUT'})  [x]
// setIsPending(false) setError(null)  [x]
// outside of try /catch, return {logout, error, isPending}  [x]
// gt AuthContext, add case same but user: null  [x]
//   [x]

-- call the http with asyn await
--  no reponse need, just error handle 
-- export the states and functions as object

124 commit [x]
// gt Navbar.js [x]
// in Navbar block,  bring logout from useLogout() [x]
// jsx add new li tag after signup, button cn btn onclick logout cont logout  [x]
// gt useLogout, export the logout function [x]
// test in browser [x]
--adding a button on nav bar
--when it click clicks logout


125 commit [x]

// gt useLogout  [x]
// add state isCanceled false [x]
// add useEffect above return  [x]
// inside of the block, return ()=> setIsCanceled(true) [x]
// inside of try block, above setIsPedning(false), add if(!isCanceled){ *} [x]
// move, insert the setStates  [x]
// do same in catch block [x]

// copy to useSignup.js [x]
// import useEffect [x]

126 commit [x]

// create useLogin.js inside of hooks folder  [x]
// copy paste  [x]
// change names  [x]
// fetch passing email password  [x]
// change and set up dispatch  [x]
// update user on dispatch  [x]

127 commit [x]

// gt Login.js [x] 
// import useLogin [x] 
// login error isPending = useLogin() [x] 
// handleSubmit add login(email, password) [x] 
// bottom of jsx from {*} [x] 
// error && <p> {error} [x] 
// if pending is true show loading button with disable [x] 
// else login button show [x] 

128 commit [x] 

// gt Navbar.js [x] 
// import useAuthContext [x] 
// const {user} = useAuthContext()  [x] 
// !user && show the login and sign up menu [x] 
// user && show logout and <li> Hello, {user.displayName} [x] 

129 commit [x]
// gt AuthContex [x]
// add to initial state, authIsReady: false  [x]
// add useEffect under [x]
// insert in the block, auth.onAuthStateChanged(*) [x]
// (user) => {dispatch({type: 'AUTH_IS_READY', payload:user })} [x]
// assign auth.on... to const unsub  [x]
// insert in the block unsub() [x]
// add case in switch, case 'AUTH_IS_READY' [x]
// return {...state, user: action.payload, authIsReady: true} [x]

130 commit [x]

//gt app.js [x]
// import useAuthContext [x]
// destructure authIsReady from useAuthContext [x]()
// wrap  authIsRead && everything [x]
// test [x]

131 commit [x] end of authentication

// gt app.js [x]
// import redirect [x]
// wrap Home with user&& [x]
// right above {!user && <Redirect to '/login' />} [x]
// do similar thing to login [x]
// do signup [x] 
// 

132 commit [x][]

// gt homepage [x]
// cn styles.container wrap [x]
// div.styles.content  [x]transaction list
// sibliing div style.sidebar [x]
// gt css copy paste  [x]
// create TransactionForm.jsx in Home folder [x]
// _rfc [x]
// import useState [x]
// const [name, setName] = "" [x]
// state amount "" [x]
// create form that looks like on the video [x]
// I need to put form in side bar [x]
// create form [x]
// create couple state  [x]
// button that submits but for now console an object  [x]
// all the input need to update on form [x]

133 commit []

// gt firestore online and create database [x]
// create useFireStore.js inside hooks folder [x]
// import useReducer useEffect useState [x]
// projectFirestore from config [x]
// export const useFirestore function [x]
// pass collection [x]
// in the block,  const [response, dispatch] =useReducer(firestoreReducer, initialState) [x]
// let initialState = {*} [x]
// insert, document: null, isPending: false, error: null, success: null [x]
// const firestoreReducer =(state, action) => {*} [x]
// insert, switch (action.type){*} [x]
// insert, default:  return state [x]
// below reponse state, isCancelled false [x]
// const ref = projectFirestore.collection(collection)  [x]
// const addDocument = (doc) => {empty} [x]
// const deleteDocument = (doc) => { }[x]
// useEffect(() => {*}, []) [x]
// insert, return () => { setIsCanceled(true)} [x]
// retrun {addDocument, deleteDocument} [x]












